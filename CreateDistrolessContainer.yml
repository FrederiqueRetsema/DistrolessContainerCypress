# CreateDistrolessContainer
# =========================

AWSTemplateFormatVersion: "2010-09-09"
Description: Create distroless container image

Parameters:

  DownloadCommands:
    Description: Commands to get the repository to the EC2
    Type: String

  VpcId:
    Description: Vpc for EC2 instance
    Type: String
  SubnetId:
    Description: Subnet for EC2 instance
    Type: String

  ContainerName:
    Description: Name of this container image
    Type: String
  ContainerTag:
    Description: Tag of this container image
    Type: String

  ECRRepository:
    Type: String

  S3BucketWithTestResults:
    Type: String

  CypressImage:
    Type: String
    Default: "cypress/included:10.3.0"
  BaseDir:
    Type: String
    Default: "/opt/distroless/src"
  RepoDir:
    Description: Commands to get the repository to the EC2
    Type: String
    Default: "/opt/distroless/src/DistrolessContainerCypress"

  EC2InstanceType:
    Description: Instance type for EC2 
    Type: String
    Default: t3.medium
  EC2KeyName:
    Description: Key name for EC2 
    Type: String
    Default: EC2Key
  AmazonLinux2AMI: 
    Description: Amazon Linux AMI
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs


Mappings:
  AWSManagedRoles:
    ECR:
      EC2InstanceProfileForImageBuilderECRContainerBuilds: "arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds"

Resources:

  DistrolessContainerIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !FindInMap [ "AWSManagedRoles", "ECR", "EC2InstanceProfileForImageBuilderECRContainerBuilds"]
  DistrolessContainerIAMRolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "DistrolessContainerIAMRolePolicies"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: "Allow"
            Action:
              - 's3:ListBucket'
              - 's3:GetObject'
              - 's3:PutObject'
            Effect: Allow
            Resource: 
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3BucketWithTestResults
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3BucketWithTestResults
                  - /*
          -
            Effect: "Allow"
            Action:
              - "ecr:ListImages"
            Resource: 
              - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ECRRepository}"
      Roles:
        -
          Ref: DistrolessContainerIAMRole
  DistrolessContainerIAMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: DistrolessContainerIAMRole

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DistrolessContainerSecurityGroup
      GroupDescription: DistrolessContainerSecuritygroup
      VpcId: !Ref VpcId
  SecurityGroupIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      CidrIp: 0.0.0.0/0      
      Description: SSH
      FromPort: 22
      ToPort: 22
      IpProtocol: TCP
  SecurityGroupEgressPublicInternetHTTP:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref SecurityGroup
      CidrIp: 0.0.0.0/0
      Description: Public Internet HTTP
      FromPort: 80
      ToPort: 80
      IpProtocol: TCP
  SecurityGroupEgressPublicInternetHTTPS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref SecurityGroup
      CidrIp: 0.0.0.0/0      
      Description: Public Internet HTTPS
      FromPort: 443
      ToPort: 443
      IpProtocol: TCP

  DistrolessContainerBuildInstance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          files:
            '/opt/distroless/01-install.sh':
              content: |
                #!/bin/bash

                yum install git -y
                
              mode: 00500        

            '/opt/distroless/02-update-aws-cli.sh':
              content: |
                #!/bin/bash
                download_and_unzip_aws_cli_v2() {
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip awscliv2.zip
                }

                install_aws_cli_v2() {
                    sudo ./aws/install
                }

                move_from_aws_cli_v1_to_aws_cli_v2() {
                    rm -f /bin/aws
                    ln -s /usr/local/bin/aws /bin/aws
                }

                download_and_unzip_aws_cli_v2
                install_aws_cli_v2
                move_from_aws_cli_v1_to_aws_cli_v2
                
              mode: 00500        

            '/opt/distroless/03-install-and-start-docker.sh':
              content: !Sub |
                #!/bin/bash
                echo "TRACE Install and start docker"

                amazon-linux-extras install docker -y
                systemctl enable --now docker
                systemctl status docker
                
              mode: 00500        

            '/opt/distroless/04-get-files.sh':
              content: !Sub |
                #!/bin/bash

                export LOCALHOST=$(ifconfig | grep inet | grep -v inet6 | grep -v 172\.31 | grep -v 127\.0\.0\.1 | awk '{print $2}')

                chmod_file() {
                  LAST_THREE_CHARS=$(echo $FILE | awk '{print substr($0,length($0)-2,3)}')

                  if test "$LAST_THREE_CHARS" == '.sh'
                  then
                    chmod 700 $FILE
                  else
                    chmod 600 $FILE                                      
                  fi
                }

                change_file() {
                  FILE=$1

                  sed "s#{LOCALHOST}#$LOCALHOST#g" -i $FILE

                  chmod_file $FILE
                }

                BASE_DIR="${BaseDir}"

                mkdir -p "$BASE_DIR"
                cd "$BASE_DIR"
                ${DownloadCommands}

                export -f change_file
                export -f chmod_file
                find . -type f -name "*" -exec bash -c 'change_file "$@"' bash {} \;
                find . -type d -name "*" -exec chmod 755 {} \;

              mode: 00500

            '/opt/distroless/05-install-and-start-nodejs.sh':
              content: !Sub |
                #!/bin/bash

                install_node_js() {
                    # See also: https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html

                    export HOME=/root
                    touch /root/.bashrc
                    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
                    . ~/.nvm/nvm.sh
                    nvm install --lts
                }

                run_npm_install() {
                    REPO_DIR="${RepoDir}"

                    cd "$REPO_DIR/e2e" || exit 1
                    npm install
                }

                install_node_js
                run_npm_install

              mode: 00500        

            '/opt/distroless/06-create-copy-cmds.sh':
              content: !Sub |
                #!/bin/bash

                REPO_DIR="${RepoDir}"

                DOCKER_DIR="$REPO_DIR/docker"
                SCRIPT_DIR="$REPO_DIR/scripts"
                BUILD_DIR="$REPO_DIR/builddir"
                CYPRESS_DIR="$REPO_DIR/e2e"

                BUILD_DOCKERFILE="build-dockerfile"
                BUILD_DOCKERFILE_LDD="build-dockerfile-ldd"
                BUILD_DOCKERFILE_STRACE="build-dockerfile-strace"

                START_TEST_SCRIPT="$REPO_DIR/scripts/start-test.sh"
                STOP_TEST_SCRIPT="$REPO_DIR/scripts/start-test.sh"

                copy_dockerfiles_to_build_dir() {
                  cp -r "$DOCKER_DIR"/* "$BUILD_DIR"
                }

                create_build_dockerfile_ldd() {
                  DOCKERFILE="./$BUILD_DOCKERFILE_LDD"

                  cat "$DOCKER_DIR/dockerfile-head" > $DOCKERFILE

                  echo "RUN  apk add lddtree"       >> $DOCKERFILE
                  echo "COPY ./exec-ldd.sh /"       >> $DOCKERFILE
                  echo "COPY ./exec-strace.sh /"    >> $DOCKERFILE

                  echo 'ENTRYPOINT ["/bin/sh", "-c", "sh /exec-ldd.sh"]' >> $DOCKERFILE
                }

                create_build_dockerfile_strace() {
                  DOCKERFILE="./$BUILD_DOCKERFILE_STRACE"

                  cat "$DOCKER_DIR/dockerfile-head" > $DOCKERFILE

                  echo "RUN  apk add strace"        >> $DOCKERFILE
                  echo "COPY ./exec-ldd.sh /"       >> $DOCKERFILE
                  echo "COPY ./exec-strace.sh /"    >> $DOCKERFILE

                  echo 'ENTRYPOINT ["/bin/sh", "-c", "sh /exec-strace.sh"]' >> $DOCKERFILE
                }

                build_build_container() {
                  DOCKERFILE=$1
                  TAG=$2

                  docker build -t "${ContainerName}:$TAG" -f "./$DOCKERFILE" .
                }

                start_test_script() {
                  $START_TEST_SCRIPT
                }

                get_copy_lines_from_ldd() {
                  docker run -i -v "$BUILD_DIR":/build_dir "${ContainerName}:ldd"
                }

                get_copy_lines_from_strace() {
                  docker run --privileged -d -p 8080:8080 -v "$BUILD_DIR":/build_dir --name strace "${ContainerName}:strace" 
                  docker run -i -v "$CYPRESS_DIR":/e2e -w /e2e ${CypressImage}
                  docker rm -f strace
                }

                stop_test_script() {
                  $STOP_TEST_SCRIPT
                }

                mkdir -p "$REPO_DIR"

                mkdir -p "$BUILD_DIR"
                cd "$BUILD_DIR"

                copy_dockerfiles_to_build_dir

                cd "$DOCKER_DIR"
                create_build_dockerfile_ldd
                build_build_container "$BUILD_DOCKERFILE_LDD" "ldd"
                create_build_dockerfile_strace
                build_build_container "$BUILD_DOCKERFILE_STRACE" "strace"

                start_test_script
                get_copy_lines_from_ldd
                get_copy_lines_from_strace
                stop_test_script

              mode: 00500        

            '/opt/distroless/07-create-distroless-container.sh':
              content: !Sub |
                #!/bin/bash

                REPO_DIR="${RepoDir}"
                BUILD_DIR="$REPO_DIR/builddir"
                DOCKERFILE_HEAD_FILE="$BUILD_DIR/dockerfile-head"
                DOCKERFILE_START_FROM_SCRATCH_FILE="$BUILD_DIR/dockerfile-start-from-scratch"
                DOCKERFILE_COPY_COMMANDS_FILE="$BUILD_DIR/dockerfile-copy-commands"
                DOCKERFILE_TAIL_FILE="$BUILD_DIR/dockerfile-tail"
                DOCKERFILE_DISTROLESS="$BUILD_DIR/dockerfile-distroless"

                sort_unique_copy_files() {
                        cat "$BUILD_DIR/docker-copy-commands-ldd" "$BUILD_DIR/docker-copy-commands-strace" |
                          sort |
                          uniq > "$DOCKERFILE_COPY_COMMANDS_FILE"
                }

                create_dockerfile_distroless() {
                  cat "$DOCKERFILE_HEAD_FILE" \
                      "$DOCKERFILE_START_FROM_SCRATCH_LINE_FILE" \
                      "$DOCKERFILE_COPY_COMMANDS_FILE" \
                      "$DOCKERFILE_TAIL_FILE" | \
                  grep -v '/dev/' | \
                  grep -v '/var/www/logs' | \
                  grep -v 'run/'  > "$DOCKERFILE_DISTROLESS"                
                }

                build_dockerfile_distroless() {
                        DOCKERFILE="$DOCKERFILE_DISTROLESS"
                        docker build -t ${ContainerName}:${ContainerTag} -f "$DOCKERFILE" .
                }

                cd $BUILD_DIR
                sort_unique_copy_files
                create_dockerfile_distroless
                build_dockerfile_distroless
              mode: 00500        

          commands:
            01-install:
              command: /opt/distroless/01-install.sh
              ignoreErrors: true
            02-update-aws-cli:
              command: /opt/distroless/02-update-aws-cli.sh
              ignoreErrors: true
            03-install-and-start-docker:
              command: /opt/distroless/03-install-and-start-docker.sh
              ignoreErrors: true
            04-get-files:
              command: /opt/distroless/04-get-files.sh
              ignoreErrors: true
            05-install-and-start-nodejs:
              command: /opt/distroless/05-install-and-start-nodejs.sh
              ignoreErrors: true
            06-create-copy-cmds:
              command: /opt/distroless/06-create-copy-cmds.sh
              ignoreErrors: true
            07-create-distroless-container:
              command: /opt/distroless/07-create-distroless-container.sh
              ignoreErrors: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT1H
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeType: "gp2"
            VolumeSize: 15
            DeleteOnTermination: true
      ImageId: !Ref AmazonLinux2AMI 
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref EC2KeyName
      IamInstanceProfile: !Ref DistrolessContainerIAMInstanceProfile
      SubnetId: !Ref SubnetId
      Tags:
        - Key: Name
          Value: DistrolessContainerBuildInstance
      SecurityGroupIds:
        - !Ref SecurityGroup
      UserData: 
        "Fn::Base64": 
          !Sub |
            #!/bin/bash
            yum update -y

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource DistrolessContainerBuildInstance --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource DistrolessContainerBuildInstance --region ${AWS::Region}
            # /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource DistrolessContainerBuildInstance --region ${AWS::Region}
  