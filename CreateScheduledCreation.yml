# CreateScheduledCreation
# =======================

AWSTemplateFormatVersion: "2010-09-09"
Description: Create scheduled creation of distroless images

Parameters:

  DownloadCommands:
    Description: Commands to get the repository to the EC2
    Type: String

  VpcId:
    Description: Vpc for EC2 instance
    Type: String
  SubnetId:
    Description: Subnet for EC2 instance
    Type: String

  ContainerName:
    Description: Name of this container image
    Type: String
  ContainerTag:
    Description: Tag of this container image
    Type: String

  DatabaseEndpoint:
    Type: String
  DatabaseName:
    Type: String
  DatabasePrefix:
    Type: String
  DatabaseUserId:
    Type: String
  DatabasePassword:
    Type: String
  WordpressUserId:
    Type: String
  WordpressPassword:
    Type: String
  WordpressEFSId:
    Type: String

  ECRRepository:
    Description: "format 123456789012.dkr.ecr.eu-west-1.amazonaws.com/distroless-container"
    Type: String

  S3BucketWithTestResults:
    Description: "format bucket-with-testresults"
    Type: String
  S3BucketKeyPrefix:
    Description: "format first-dir/second-dir"
    Type: String
  S3BucketWithCloudFormationTemplates:
    Description: "format bucket-with-cloudformation-templates"
    Type: String
  DatabaseEndpoint: 
    Type: String
    
  CypressImage:
    Type: String
    Default: "cypress/included:10.4.0"
  BaseDir:
    Type: String
    Default: "/opt/distroless/src"
  RepoDir:
    Type: String
    Default: "/opt/distroless/src/DistrolessContainerCypress"

  EC2InstanceType:
    Description: Instance type for EC2 
    Type: String
    Default: t3.medium
  EC2KeyName:
    Description: Key name for EC2 
    Type: String
    Default: EC2Key
  AmazonLinux2AMI: 
    Description: Amazon Linux AMI
    Type: String
  CreateNewDistrolessContainerStackName:
    Type: String
    Default: CreateDistrolessContainer

  ScheduleExpression:
    Type: String
    Default: cron(0 0 ? * SUN *)

Resources:

  StateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: CloudFormationSSMEC2Logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:CreateStack"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:DescribeStacks"
                Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${CreateNewDistrolessContainerStackName}/*"
              - Effect: Allow
                Action:
                  - "ssm:GetParameters"
                Resource: !Sub "arn:aws:ssm:*:*:parameter/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs"
              - Effect: Allow
                Action: 
                  - "iam:CreateRole"
                  - "iam:DeleteRole"
                  - "iam:AttachRolePolicy"
                  - "iam:DetachRolePolicy"
                  - "iam:CreateInstanceProfile"
                  - "iam:DeleteInstanceProfile"
                  - "iam:AddRoleToInstanceProfile"
                  - "iam:RemoveRoleFromInstanceProfile"
                  - "iam:GetRolePolicy"
                  - "iam:PutRolePolicy"
                  - "iam:DeleteRolePolicy"
                  - "iam:PassRole"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ec2:DescribeImages"
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:CreateSecurityGroup"
                  - "ec2:DeleteSecurityGroup"
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:AuthorizeSecurityGroupEgress"
                  - "ec2:RevokeSecurityGroupIngress"
                  - "ec2:RevokeSecurityGroupEgress"
                  - "ec2:RunInstances"
                  - "ec2:TerminateInstances"
                  - "ec2:CreateTags"
                  - "ec2:DeleteTags"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                  - "logs:PutLogEvents"
                Resource: "*"


  StateMachineNewVersionDistrolessContainer:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt [ StateMachineExecutionRole, Arn ]
      DefinitionString: !Sub |
        {
          "Comment": "Create a new version of the Distroless Container",
          "StartAt": "Create Stack",
          "States": {
            "Create Stack": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:cloudformation:createStack",
              "Parameters": {
                "StackName": "${CreateNewDistrolessContainerStackName}",
                "TemplateURL": "https://${S3BucketWithCloudFormationTemplates}.s3.amazonaws.com/${CreateNewDistrolessContainerStackName}.yml",
                "Capabilities": [
                  "CAPABILITY_IAM"
                ],
                "Parameters": [
                  {
                    "ParameterKey": "DownloadCommands",
                    "ParameterValue": "${DownloadCommands}"
                  },
                  {
                    "ParameterKey": "VpcId",
                    "ParameterValue": "${VpcId}"
                  },
                  {
                    "ParameterKey": "SubnetId",
                    "ParameterValue": "${SubnetId}"
                  },
                  {
                    "ParameterKey": "ContainerName",
                    "ParameterValue": "${ContainerName}"
                  },
                  {
                    "ParameterKey": "ContainerTag",
                    "ParameterValue": "${ContainerTag}"
                  },
                  {
                    "ParameterKey": "DatabaseEndpoint",
                    "ParameterValue": "${DatabaseEndpoint}"
                  },
                  {
                    "ParameterKey": "DatabaseName",
                    "ParameterValue": "${DatabaseName}"
                  },
                  {
                    "ParameterKey": "DatabasePrefix",
                    "ParameterValue": "${DatabasePrefix}"
                  },
                  {
                    "ParameterKey": "DatabaseUserId",
                    "ParameterValue": "${DatabaseUserId}"
                  },
                  {
                    "ParameterKey": "DatabasePassword",
                    "ParameterValue": "${DatabasePassword}"
                  },
                  {
                    "ParameterKey": "WordpressUserId",
                    "ParameterValue": "${WordpressUserId}"
                  },
                  {
                    "ParameterKey": "WordpressPassword",
                    "ParameterValue": "${WordpressPassword}"
                  },
                  {
                    "ParameterKey": "ECRRepository",
                    "ParameterValue": "${ECRRepository}"
                  },
                  {
                    "ParameterKey": "S3BucketWithTestResults",
                    "ParameterValue": "${S3BucketWithTestResults}"
                  },
                  {
                    "ParameterKey": "S3BucketKeyPrefix",
                    "ParameterValue": "${S3BucketKeyPrefix}"
                  },
                  {
                    "ParameterKey": "S3BucketWithCloudFormationTemplates",
                    "ParameterValue": "${S3BucketWithCloudFormationTemplates}"
                  },
                  {
                    "ParameterKey": "CypressImage",
                    "ParameterValue": "${CypressImage}"
                  },
                  {
                    "ParameterKey": "EC2KeyName",
                    "ParameterValue": "${EC2KeyName}"
                  }
                ]
              },
              "Next": "Get Stack State Create Stack"
            },
            "Get Stack State Create Stack": {
              "Type": "Task",
              "Parameters": {
                "StackName": "${CreateNewDistrolessContainerStackName}"
              },
              "Resource": "arn:aws:states:::aws-sdk:cloudformation:describeStacks",
              "Next": "Stack Status Create"
            },
            "Stack Status Create": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.Stacks[0].StackStatus",
                  "StringEquals": "CREATE_COMPLETE",
                  "Next": "Delete Stack"
                },
                {
                  "Or": [
                    {
                      "Variable": "$.Stacks[0].StackStatus",
                      "StringEquals": "DELETE_COMPLETE"
                    },
                    {
                      "Variable": "$.Stacks[0].StackStatus",
                      "StringEquals": "ROLLBACK_COMPLETE"
                    },
                    {
                      "Variable": "$.Stacks[0].StackStatus",
                      "StringEquals": "CREATE_FAILED"
                    },
                    {
                      "Variable": "$.Stacks[0].StackStatus",
                      "StringEquals": "DELETE_FAILED"
                    },
                    {
                      "Variable": "$.Stacks[0].StackStatus",
                      "StringEquals": "ROLLBACK_FAILED"
                    }
                  ],
                  "Next": "Create Failed"
                }
              ],
              "Default": "Wait 60 seconds Create"
            },
            "Wait 60 seconds Create": {
              "Type": "Wait",
              "Seconds": 60,
              "Next": "Get Stack State Create Stack"
            },
            "Create Failed": {
              "Type": "Pass",
              "End": true,
              "Result": {
                "Result": "Failed"
              }
            },
            "Delete Stack": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:cloudformation:deleteStack",
              "Parameters": {
                "StackName": "${CreateNewDistrolessContainerStackName}"
              },
              "Next": "Get Stack State Delete Stack"
            },
            "Get Stack State Delete Stack": {
              "Type": "Task",
              "Parameters": {
                "StackName": "${CreateNewDistrolessContainerStackName}"
              },
              "Resource": "arn:aws:states:::aws-sdk:cloudformation:describeStacks",
              "Next": "Stack Status Delete",
              "Catch": [
              {
                  "ErrorEquals": [
                      "CloudFormation.CloudFormationException"
                  ],
                  "Next": "Succesful"
              }]      
            },
            "Stack Status Delete": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.Stacks[0].StackStatus",
                  "StringEquals": "DELETE_COMPLETE",
                  "Next": "Succesful"
                },
                {
                  "Or": [
                    {
                      "Variable": "$.Stacks[0].StackStatus",
                      "StringEquals": "ROLLBACK_COMPLETE"
                    },
                    {
                      "Variable": "$.Stacks[0].StackStatus",
                      "StringEquals": "CREATE_FAILED"
                    },
                    {
                      "Variable": "$.Stacks[0].StackStatus",
                      "StringEquals": "DELETE_FAILED"
                    },
                    {
                      "Variable": "$.Stacks[0].StackStatus",
                      "StringEquals": "ROLLBACK_FAILED"
                    }
                  ],
                  "Next": "Delete Failed"
                }
              ],
              "Default": "Wait 60 seconds Delete"
            },
            "Wait 60 seconds Delete": {
              "Type": "Wait",
              "Seconds": 60,
              "Next": "Get Stack State Delete Stack"
            },
            "Succesful": {
              "Type": "Pass",
              "End": true,
              "Result": {
                "Result": "Failed"
              }
            },
            "Delete Failed": {
              "Type": "Pass",
              "End": true,
              "Result": {
                "Result": "Failed"
              }
            }
          }
        }

  StartStateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StartStateMachineExecutionRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                  - "logs:PutLogEvents"
                Resource: "*"

  ScheduledCreationOfNewContainerImage:
    Type: AWS::Events::Rule
    Properties: 
      Description: Will create a new container image every week
      Name: ScheduledCreationOfNewContainerImage
      RoleArn: !GetAtt [ StartStateMachineExecutionRole, Arn ]
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED      
      Targets: 
        - Arn: !Ref StateMachineNewVersionDistrolessContainer
          Id: "ScheduledCreationOfNewContainerImage"
          RoleArn: !GetAtt [ StartStateMachineExecutionRole, Arn]

