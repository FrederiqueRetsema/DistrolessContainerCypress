# CloudFormationECR
# =================

AWSTemplateFormatVersion: "2010-09-09"
Description: Create container registry

Resources:

  WordPressDistrolessRepository:
    Type: AWS::ECR::Repository
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: wordpress-distroless
      RepositoryPolicyText:
        !Sub |
          {
            "Version": "2008-10-17",
            "Statement": [
              {
                "Sid": "WordPressRepositoryReadOnly",
                "Effect": "Allow",
                "Principal": "*",
                "Action": [
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:BatchDeleteImage",
                  "ecr:BatchGetImage",
                  "ecr:CompleteLayerUpload",
                  "ecr:DeleteLifecyclePolicy",
                  "ecr:DeleteRepository",
                  "ecr:DeleteRepositoryPolicy",
                  "ecr:DescribeImages",
                  "ecr:DescribeRepositories",
                  "ecr:GetDownloadUrlForLayer",
                  "ecr:GetLifecyclePolicy",
                  "ecr:GetLifecyclePolicyPreview",
                  "ecr:GetRepositoryPolicy",
                  "ecr:InitiateLayerUpload",
                  "ecr:ListImages",
                  "ecr:PutImage",
                  "ecr:PutLifecyclePolicy",
                  "ecr:SetRepositoryPolicy",
                  "ecr:StartLifecyclePolicyPreview",
                  "ecr:UploadLayerPart"
                ]
              }
            ]
          }
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
            {
                "rulePriority": 1,
                "description": "Keep images for 30 days",
                "selection": {
                  "tagStatus": "any",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 30
                },
                "action": {
                  "type": "expire"
                }
            }]
          }

  DeleteECRRepositoryExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
              - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
  DeleteECRRepositoryExecutionRolePolicies:
    DependsOn: DeleteECRRepositoryExecutionRole
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "CloudwatchAndECR"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: 
              - "logs:PutLogEvents"
              - "logs:CreateLogStream"
              - "logs:CreateLogGroup"
            Resource: "*"
          - Effect: "Allow"
            Action: 
              - "ecr:DeleteRepository"
            Resource:
              - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${WordPressDistrolessRepository}"
              
      Roles:
        - Ref: "DeleteECRRepositoryExecutionRole"       
  DeleteECRRepositoryFunction:
    DependsOn: 
    - DeleteECRRepositoryExecutionRole
    - DeleteECRRepositoryExecutionRolePolicies
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt DeleteECRRepositoryExecutionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          #!/usr/bin/env python
          # -*- coding: utf-8 -*-
          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html

          import json
          import cfnresponse
          import boto3

          def lambda_handler(event, context):
            try:
                ecr_repository  = event['ResourceProperties']['WordPressDistrolessRepository']
                print(event)

                if event['RequestType'] == 'Delete':
                  ecr = boto3.client('ecr')

                  ecr.delete_repository(
                    repositoryName = ecr_repository,
                    force = True
                  )

                print("TRACE Before SUCCESS")
                responseData = {}
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
            except Exception as e:
                print(e)
                print("TRACE Before FAILED")
                responseData = {}
                cfnresponse.send(event, context, cfnresponse.FAILED, responseData, "CustomResourcePhysicalID")

            return
      Runtime: python3.8  

  ExecuteDeleteECRRepositoryFunction:
    Type: Custom::ExecuteDeleteECRRepositoryFunction
    Properties:
      ServiceToken: !GetAtt DeleteECRRepositoryFunction.Arn
      WordPressDistrolessRepository: !Ref WordPressDistrolessRepository

Outputs:
  RepositoryUri:
    Value: WordPressDistrolessRepository.RepositoryUri