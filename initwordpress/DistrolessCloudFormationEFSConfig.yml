# CloudFormationEFSConfig
# -----------------------

AWSTemplateFormatVersion: "2010-09-09"
Description: Install WordPress on EFS

Parameters:
  EC2InstanceType:
    Description: EC2 type 
    Type: String
    Default: t3.medium

  EC2KeyName:
    Description: Key name for EC2 
    Type: AWS::SSM::Parameter::Value<String>
    Default: /wordpress/build/ec2keyname
  AmazonLinux2AMI: 
    Description: Amazon Linux AMI
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs

  PrivateSubnetWriteAZa:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /wordpress/network/private-subnet-write-aza
  PrivateSubnetReadOnlyAZaId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /wordpress/network/private-subnet-read-only-aza
  PrivateSubnetReadOnlyAZbId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /wordpress/network/private-subnet-read-only-azb

  EC2EFSMountPointSecurityGroup: 
    Type: AWS::SSM::Parameter::Value<String>
    Default: /wordpress/network/sg/ec2efs-security-group

  EFSFSId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /wordpress/container/efs-fs-id
  WordPressMountTargetReadOnlyAZa:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /wordpress/network/efs-ip-addr-aza
  
Mappings:
  AWSManagedRoles:
    SSM:
      AmazonSSMManagedInstanceCore: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

Resources:

  # ============================================================================================================================================================
  # Log groups
  # ============================================================================================================================================================

  CloudwatchEC2EFSLogGroupMessages:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/EC2EFS/messages
      RetentionInDays: 1

  CloudwatchEC2EFSLogGroupCfnInitCmdLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/EC2EFS/cfn-init-cmd.log
      RetentionInDays: 1

  CloudwatchEC2EFSLogGroupCloudInitOutputLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/EC2EFS/cloud-init-output.log
      RetentionInDays: 1

  # ==============================================================================================================================================================
  # EC2EFS
  # ==============================================================================================================================================================
  
  EC2EFSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !FindInMap [ "AWSManagedRoles", "SSM", "AmazonSSMManagedInstanceCore"]
  EC2EFSIAMRolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "EC2EFSIAMRolePolicies"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: 
              - "logs:CreateLogStream"
              - "logs:CreateLogGroup"
              - "logs:PutLogEvents"
              - "cloudwatch:PutMetricData"
            Resource: 
              - "*"
          -
            Effect: "Allow"
            Action: 
              - "elasticfilesystem:ClientRootAccess"
            Resource: 
              - !Sub "arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${EFSFSId}"
      Roles:
        -
          Ref: "EC2EFSIAMRole"
  EC2EFSIAMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "EC2EFSIAMRole"

  EC2EFS:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum:
              jq: []           
          files:
            '/opt/aws/amazon-cloudwatch-agent/bin/config.json':
              content: !Sub |
                {
                   "agent": {
                      "metrics_collection_interval": 60,
                      "run_as_user": "cwagent"
                    },
                    "logs": {
                      "logs_collected": {
                          "files": {
                                  "collect_list": [
                                          {
                                                  "file_path": "/var/log/messages",
                                                  "log_group_name": "${CloudwatchEC2EFSLogGroupMessages}"
                                          },
                                          {
                                                  "file_path": "/var/log/cloud-init-output.log",
                                                  "log_group_name": "${CloudwatchEC2EFSLogGroupCloudInitOutputLog}"
                                          },
                                          {
                                                  "file_path": "/var/log/cfn-init-cmd.log",
                                                  "log_group_name": "${CloudwatchEC2EFSLogGroupCfnInitCmdLog}"
                                          }
                                  ]
                            }
                      }
                    },
                    "metrics": {
                      "metrics_collected": {
                          "disk": {
                                  "measurement": [
                                          "used_percent"
                                  ],
                                  "metrics_collection_interval": 60,
                                  "resources": [
                                          "*"
                                  ]
                          },
                          "mem": {
                                  "measurement": [
                                          "mem_used_percent"
                                  ],
                                  "metrics_collection_interval": 60
                          },
                          "cpu": {
                                  "measurement": [
                                           "usage_active"
                                  ],
                                  "totalcpu": true,
                                  "metrics_collection_interval": 60
                          }
                       }
                     }
                }
            '/opt/wordpress/01-install-and-run-cw-agent.sh':
              content: |
                #!/bin/bash
                #
                # Install the cloudwatch agent (see also: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/download-cloudwatch-agent-commandline.html)
                #
                curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
                curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm.sig

                # Check fingerprint
                # - See: how to veryfy fingerprint: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/verify-CloudWatch-Agent-Package-Signature.html
                # 
                curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/assets/amazon-cloudwatch-agent.gpg
                key=$(gpg --import amazon-cloudwatch-agent.gpg 2> >(grep key | awk '{print $3}' | awk -F":" '{print $1}'))
                echo "Key = ${key}"

                fingerprint=$(gpg --fingerprint $key | grep fingerprint | awk -F"=" '{print $2}' | xargs)
                echo "Fingerprint = ${fingerprint}"
                if (test "${fingerprint}" != "9376 16F3 450B 7D80 6CBD 9725 D581 6730 3B78 9C72")
                then
                  echo "Fingerprint is not equal to the fingerprint that we expected, stop"
                  exit 1
                fi

                gpg_output=$(gpg --verify amazon-cloudwatch-agent.rpm.sig amazon-cloudwatch-agent.rpm 2> >(cat))
                result_good_signature=$(echo $gpg_output | grep "Good signature")
                result_from_Amazon_Cloudwatch_Agent=$(echo $result_good_signature | grep "Amazon CloudWatch Agent")
                if (test -z "${result_from_Amazon_Cloudwatch_Agent}")
                then
                  echo "gpg output:"
                  echo $gpg_output
                  echo "Signature is not correct, stop"
                  exit 1
                fi

                rpm -U ./amazon-cloudwatch-agent.rpm
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a start 

                chown root:cwagent /var/log/messages
                chmod 640 /var/log/messages

                chown root:cwagent /var/log/cloud-init-output.log
                chmod 640 /var/log/cloud-init-output.log
              mode: 000500

            '/opt/wordpress/02-update-aws-cli.sh':
              content: |
                #!/bin/bash
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install
                rm -f /bin/aws
                ln -s /usr/local/bin/aws /bin/aws
              mode: 000500

            '/opt/wordpress/03-mount-efs-and-copy-wp-content.sh':
              content: !Sub |
              
                #!/bin/bash
                
                echo "TRACE Mount EFS"
                yum install -y amazon-efs-utils
                echo "${WordPressMountTargetReadOnlyAZa} ${EFSFSId}.efs.${AWS::Region}.amazonaws.com" >> /etc/hosts

                echo "TRACE Mount EFS"
                mkdir /mnt/efs
                mount -t efs -o tls,iam ${EFSFSId}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs

                echo "TRACE Install tar and http"
                yum -y install tar httpd

                echo "TRACE Download WordPress"
                cd /opt/wordpress
                curl -O https://wordpress.org/latest.tar.gz
                tar -xzvf latest.tar.gz

                echo "TRACE Copy wp-content to EFS and create private directory for f.e. .htaccess"
                cp -p -r /opt/wordpress/wordpress/wp-content/* /mnt/efs
                mkdir /mnt/efs/private
                cp /opt/wordpress/wordpress_htaccess /mnt/efs/private/.htaccess
                ln -s /var/log/httpd/debug.log /mnt/efs/debug.log

                echo "TRACE Set permissions to apache:apache"
                chown -R apache:apache /mnt/efs/*


              mode: 000500

            # Source: https://wordpress.org/support/article/htaccess/
            '/opt/wordpress/wordpress_htaccess':
              content: !Sub |
                # BEGIN WordPress

                RewriteEngine On
                RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
                RewriteBase /
                RewriteRule ^index\.php$ - [L]
                RewriteCond %{REQUEST_FILENAME} !-f
                RewriteCond %{REQUEST_FILENAME} !-d
                RewriteRule . /index.php [L]

                # END WordPress
                
                # Don't allow other sites to include this site in a frame (source: ZAP and https://stackoverflow.com/questions/30750576/how-to-set-x-frame-options-header-in-wordpress-site/44573750 )
                Header set X-Frame-Options SAMEORIGIN
                Header set X-Content-Type-Options nosniff

          commands:
            01-install-cw-agent:
              command: /opt/wordpress/01-install-and-run-cw-agent.sh
              ignoreErrors: true
            # In the AMI, the AWS CLI is installed, but this is AWS CL version 1. ECR needs version 2 of the CLI.
            02-update-aws-cli:
              command: /opt/wordpress/02-update-aws-cli.sh
              ignoreErrors: true
            03-mount-efs-and-copy-wp-content:
              cwd: /opt/wordpress
              command: /opt/wordpress/03-mount-efs-and-copy-wp-content.sh
              ignoreErrors: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT1H
    Properties:
      ImageId: !Ref AmazonLinux2AMI 
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref EC2KeyName
      IamInstanceProfile: !Ref EC2EFSIAMInstanceProfile
      SubnetId: !Ref PrivateSubnetWriteAZa
      Tags:
        - Key: Name
          Value: EC2EFSInstance 
      SecurityGroupIds:
        - !Ref EC2EFSMountPointSecurityGroup
      UserData: 
        "Fn::Base64": 
          !Sub |
            #!/bin/bash
            yum update -y

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2EFS --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2EFS --region ${AWS::Region}
            sleep 5
            shutdown now
